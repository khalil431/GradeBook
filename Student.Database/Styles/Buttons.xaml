<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Student.Database">

    <!-- Style for buttons that do not change when cursor is over them -->
    <Style TargetType="Button" x:Key="Hoverless">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border> 
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- This style will act on the window icon to make it hoverless and add some padding -->
    <Style TargetType="Button" x:Key="SystemIconButton" BasedOn="{StaticResource Hoverless}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Padding" Value="10"/>
    </Style>

    <!-- This style will act on the window control buttons to make them transparent and change their color when cursor is over them -->
    <Style TargetType="Button" x:Key="WindowControlButton" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{StaticResource MainForegroundBrush}"/>
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.5"/>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource FontColourBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- This style gives the window close button the window control button style but changes the color to red instead when the cursor is being hovered over it -->
    <Style TargetType="Button" x:Key="WindowCloseButton" BasedOn="{StaticResource WindowControlButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="Foreground" Value="{StaticResource MainForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- This style will act on the content buttons to change cursor to hand and add animation that enlarges the button upon hovering over it and reduce it upon leaving it -->
    <Style TargetType="Button" x:Key="MainButtons" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" x:Name="border" Background="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Border.RenderTransform>
                            <ScaleTransform ScaleX="1.0" ScaleY="1.0"></ScaleTransform>
                        </Border.RenderTransform>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Mouse.MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.2" Storyboard.TargetName="border" Storyboard.TargetProperty="RenderTransform.ScaleX" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.2" Storyboard.TargetName="border" Storyboard.TargetProperty="RenderTransform.ScaleY" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Mouse.MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.0" Duration="0:0:0.2" Storyboard.TargetName="border" Storyboard.TargetProperty="RenderTransform.ScaleX" />
                                    <DoubleAnimation To="1.0" Duration="0:0:0.2" Storyboard.TargetName="border" Storyboard.TargetProperty="RenderTransform.ScaleY" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>